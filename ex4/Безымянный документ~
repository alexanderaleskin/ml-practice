В данном задание были рассмотренны способы вычитания фона при помощи ЕМ-алгоритма. В рамках первого пунтка не был реализован ЕМ-алгоритм с диагональной матрицей ковариации. На основании сделанных экспериментов в пунтках __2-6__ можно сделать следующие выводы:

1. ЕМ-алгоритм зависит от начальных приближений, поэтому стоит выбирать несколько начальных приближений
2. Простой алгоритм с полутоновым изображением достаточно неплохо определяет фон(при условии, что он статичен)
3. При добавление адаптивности возможно избавится от выделение изменений в фоне(например движение тени). Однак





Большинство ошибок, несвязанных с объектами в области тени дерева, можно разделить на все те же 2 класса, причина появления которых является сжатие изображения:

1. Ошибки вокруг машин,
2. Шум на изображения.

Так же присутствуют ошибки, связанные с дрожанием камеры. Поскольку дрожание само по себе нестабильно, избавиться от этих ошибок становиться весьма трудно(нужно увеличить количество гауссиан; но при таком количестве обучаемой выборки можем переобучиться). Куда более простой способ это стабилизировать видео, а затем при помощи одной гауссианы(поскольку изображение будет стабильно, достаточно одной) вычитать фон.

Большинство ошибок, несвязанных с объектами в области тени дерева, можно разделить на все те же 2 класса, причина появления которых является сжатие изображения:

1. Ошибки вокруг машин,
2. Шум на изображения.

Так же присутствуют ошибки, связанные с дрожанием камеры. Поскольку дрожание само по себе нестабильно, избавиться от этих ошибок становиться весьма трудно(нужно увеличить количество гауссиан; но при таком количестве обучаемой выборки можем переобучиться). Куда более простой способ это стабилизировать видео, а затем при помощи одной гауссианы(поскольку изображение будет стабильно, достаточно одной) вычитать фон.Большинство ошибок, несвязанных с объектами в области тени дерева, можно разделить на все те же 2 класса, причина появления которых является сжатие изображения:

1. Ошибки вокруг машин,
2. Шум на изображения.

Так же присутствуют ошибки, связанные с дрожанием камеры. Поскольку дрожание само по себе нестабильно, избавиться от этих ошибок становиться весьма трудно(нужно увеличить количество гауссиан; но при таком количестве обучаемой выборки можем переобучиться). Куда более простой способ это стабилизировать видео, а затем при помощи одной гауссианы(поскольку изображение будет стабильно, достаточно одной) вычитать фон.
График FP лежит значительно выше, однако это можно изменить, меняя параметр для решающего правила. В интервале 450-500 кадров ошибки особо велики (как следствие и AUC-ROC меньше), визуализируем этот интервал. В интервале  700-800 кадров AUC-ROC равен нулю, это значит, что нет пикселей "переднего плана". Однако, алгоритм допускает ошибки на этом интервале, что говорит о том, что стоит немного ослабить правило определения фона. Абсолютное количество ошибок достаточно велико, что объясняется сжатие изображений и тем, что переводим из цветного изображения в черно-белое(сокращаем количество признаков).

В данном случае подсвечены пиксели, которые не являются промежуточными(так как именно по ним считаются все оценки; с промежуточными были бы подсвечены пиксели, прилегающие к движущимся объектам и расположенные на границе тени на траве(она перемещается)). Плохо определяются синие штаны пешехода, имеющие схожий цвет с асфальтом. Также можно наблюдать ореол вокруг объектов, причем подсвечены пиксели, не касающиеся объекта. Скорее всего это последствие сжатия изображения. 


## загрузка видео(набора фотографий)
# можно выбирать сегмент. 
def load(path, make_binary = False, from_p = None, to_p = None, xc = None, yc = None):
    """
    path - path to video
    make_binary - make binary if image is color
    from_p - load picture from from_p position after sorting images
    to_p - load picture to to_p position
    xc, yc - coordinates of pixels with interest
    
    """

    pictures_list = os.listdir(path)
    pictures_list.sort()
    if from_p is None:
        from_p = 0
    if to_p is None:
        to_p = len(pictures_list)

    image = sp.ndimage.imread(path + pictures_list[0])
    shape = image.shape
    if xc is None:
        xc, yc = np.meshgrid(np.arange(shape[0]), np.arange(shape[1]))
    elif yc is None:
        raise Error('forgot yc!')
    xc = xc.ravel()
    yc = yc.ravel()
    size = len(xc)
    color = len(shape) == 3
    out3 = not make_binary and color 
    if out3:
        video = np.empty((to_p - from_p, size, shape[2]), dtype = image.dtype)
    else:
        video = np.empty((to_p - from_p, size, 1), dtype = image.dtype)
    j = 0
    for i in range(from_p, to_p):
        image = sp.ndimage.imread(path + pictures_list[i])
        if color and make_binary:
            image = 0.2126 * image[:, :, 0] + 0.7152 * image[:, :, 1] + 0.0722 * image[:, :, 2]
        if out3:
            video[j, :, :] = image[xc, yc, :] 
        else:
            video[j, :, 0] = image[xc, yc]
        j += 1
    return video


# обучение
def training(train_video, g = 1):
    """
    g - amount of gaussians
    
    """
    shape = train_video[0].shape
    rows = shape[0]
    size = shape[1]
    means = np.zeros(shape)
    stds = np.zeros(shape)
    # несколько начальных приближений не будем делать, ибо сложного случая не должно быть
    w = np.ones(size) / size
    means0 = np.ones((g,size)) * 128 + np.random.rand(g, size)
    stds0 = np.empty((g, size, size))
    stds0[:, :, :] = np.eye(size) * 3
    start = [{
                'w' : w,
                'means' : means0,
                'stds' : stds0
            }]
    for i in range(rows):
        X = train_video[:, i, :]
        ans = EM(X, start)['best']
        means[i] = ans['means']
        stds[i] = ans['stds']
    return means, stds

# предсказание
def predict3(means, stds, test_video, k = 3):
    """
    k - parameter for decision rule : |x - mean| < (k * std)
    
    """
    shape = stds.shape
    stds_trunc = np.maximum(stds, np.ones(shape, dtype = int) * 3) * k
    maska = np.empty(test_video.shape[:3], dtype = np.bool)
    for i in range(test_video.shape[0]):
        maska = np.abs(test_video - means) > stds_trunc
    return maska

#демонстрация видео
def movie(path, maska, from_p, to_p, xc, yc, pixels, from_frame = 0):
    pictures_list = os.listdir(path)
    image = sp.ndimage.imread(path + pictures_list[0])
    shape = image.shape
    video = load(path, False, from_p, to_p)
    frames = video.shape[0]
    video = np.reshape(video, (frames, shape[0], shape[1], 3), order = 'F')
    maska_all = np.zeros((frames, shape[0], shape[1]), dtype = np.bool)
    for i in range(frames):
        j = i + from_frame
        maska_all[i, xc[pixels[j, :, 0]], yc[pixels[j, :, 0]]] = maska[j, pixels[j]] #.reshape(shape).T
    mv = vs.make_video(video, maska_all)
    return mv
    

# вывод
def graffics(predict, y_true, from_frame = 1):
    frames = y_true.shape[0]
    if frames != predict.shape[0]:
        raise IndexError('different sizes of frames')
    FP = np.zeros(frames)
    FN = np.zeros(frames)
    ROC = np.zeros(frames)
    pixels = np.empty(y_true.shape, dtype = np.bool)
    for i in range(frames):
        pixels[i] = (y_true[i] == 0) | (y_true[i] == 255)
        size = pixels.size
        FP[i] = np.sum((y_true[i, pixels[i]] == 0) & (y_true[i, pixels[i]] != predict[i, pixels[i]])) #/ size
        FN[i] = np.sum((y_true[i, pixels[i]] == 255) & (y_true[i, pixels[i]] != predict[i, pixels[i]])) #/ size
        try:
            ROC[i] = roc_auc_score(np.ravel(np.bool8(y_true[i, pixels[i]])), np.ravel(predict[i, pixels[i]]))
        except ValueError:
            ROC[i] = 0
    plt.figure(figsize= (14, 5))
    plt.subplot(1, 2, 1)
    plt.plot(np.arange(frames) + from_frame, FP, '-')
    plt.plot(np.arange(frames) + from_frame, FN, '-')
    plt.title('Errors in algorithm')
    plt.ylabel('share')
    plt.xlabel('number of frame')
    plt.legend(['FP', 'FN'], loc='upper right')
    #plt.xticks(range(len(n_features)), n_features)
    plt.subplot(1, 2, 2)
    plt.plot(np.arange(frames) + from_frame, ROC, '-')
    plt.ylim((-0.01, 1.2))
    plt.title('AUC-ROC')
    plt.ylabel('accuracy')
    plt.legend(['AUC-ROC'], loc='upper left')
    plt.xlabel('number of frame')
    plt.grid(True)
    return FP, FN, ROC, pixels

def predict5(means, stds, test_video, k = 3):
    """
    decide that is fone if N(x | means, stds) > N(means + k * stds | means, stds)
    
    """
    shape = stds.shape
    I = np.eye(stds.shape[1])
    I2 = I * 1e-4 
    L = np.empty(stds.shape)
    for j in range(stds.shape[0]):
        L[j] = np.linalg.cholesky(stds[j, :, :] + I2)
        L[j] = sp.linalg.solve_triangular(L[j].T, I)
    maska = np.empty(test_video.shape[:3], dtype = np.bool)
    rule =  - k**2 / 2
    for i in range(test_video.shape[0]):
        dX = test[0] - means
        r1 = dX * L[:, :, 0]
        r1 = r1 + dX * L[:, :, 1]
        r1 = r1 + dX * L[:, :, 2]
        maska[i] = - 0.5 * np.sum(r1 ** 2, axis = 1) < rule
    return maska
